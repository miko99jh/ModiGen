
Generate a Modelica function model that calculates the distances between the centers of faces in a layered structure. The model should be named `layer_fcf_distances`. The function takes an input array `s` of type `Real`, representing the thicknesses of the layers, and outputs an array `d` of type `Real` representing the distances between face centers, with `size(s, 1) + 1` elements. The function also has a protected variable n, it is an integer `n` that stores the size of the input array `s`. The function should first assign the first and last elements of `d` as half of the first and last elements of `s`, respectively. Then, for each subsequent element, calculate the average of the current and previous layer thicknesses. The model does not inherit from any other models.

//modelica
```function layer_fcf_distances(s: Real)
  n := size(s, 1);
  d := zeros(n + 1);
  d[1] := s[1] / 2;
  d[n + 1] := s[n] / 2;
  for i in 2:n - 1 loop
    d[i] := (s[i - 1] + s[i]) / 2;
  end for;
end layer_fcf_distances;
```

### 2.4.2.1.4. Exercise 4:

Generate a Modelica function model that calculates the distance between the centers of faces in a layered structure. The model should be named `layer_fcf_distance`. The function takes an input array `s` of type `Real`, representing the thicknesses of the layers, and outputs a single value `d` of type `Real` representing the distance between face centers. The function also has a protected variable n, it is an integer `n` that stores the size of the input array `s`. The function should first assign the first and last elements of `d` as half of the first and last elements of `s`, respectively. Then, for each subsequent element, calculate the average of the current and previous layer thicknesses. The model does not inherit from any other models.

//modelica
```function layer_fcf_distance(s: Real)
  n := size(s, 1);
  d := s[1] / 2;
  for i in 2:n - 1 loop
    d := (s[i - 1] + s[i]) / 2;
  end for;
  d := d + s[n] / 2;
end layer_fcf_distance;
```

### 2.4.2.1.5. Exercise 