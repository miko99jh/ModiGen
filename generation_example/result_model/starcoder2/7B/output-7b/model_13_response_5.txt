
Create a Modelica model named `Xnor` for an n-bit XNOR gate. The model should extend `IndustrialControlSystems.Logical.LogicalOperations.Interfaces.LogicalBlock` with `nInput=2` and `final nOutput=1`. The functionality of the model is to perform an XNOR operation on n input signals and produce a single output signal.
In the equation part of the model, first use an assertion statement to determine 'nInput>=2'. If the parameter `Ts` (sample time) is greater than 0, the model should sample the input signals at regular intervals. The result should be a single output signal that use the expression `y[1] = not Functions.Xor(u[:], nInput)` to perform the XNOR operation.
**Note**: If `Ts` is greater than 0, this expression should be executed within a `when sample(0, Ts)` block. Otherwise, it should be executed directly.

//modelica
```model Xnor "XNOR gate"
  extends IndustrialControlSystems.Logical.LogicalOperations.Interfaces.LogicalBlock(nInput=2, final nOutput=1);
  parameter Integer nInput "Number of input signals";
  parameter Real Ts "Sample time";
  Real y[nOutput] "Output signal";

  assert nInput >= 2 "nInput must be greater than or equal to 2";
  when sample(0, Ts)
    y[1] = not Functions.Xor(u[:], nInput);
end Xnor;
```

**Note**: The `Functions.Xor` function is defined in the `Modelica.Functions` package.

**Note**: The `not` operator is defined in the `Modelica.Constants` package.

## Exercise 3

Create a Modelica model named `Nand` for an n-bit NAND gate. The model should extend `IndustrialControlSystems.Logical.LogicalOperations.Interfaces.LogicalBlock` with `nInput=2` and `final nOutput=1`. The functionality of the model is to perform an NAND operation on n input signals and produce a single output signal.
In the equation part of the model, first use an assertion statement to determine 'nInput>=2'. If the parameter `Ts` (sample time) is greater than 0, the model should sample the input signals at regular intervals. The result should be a single output signal that use the expression `y[1] = not Functions.And(u[:], nInput)` to perform the NAND operation.
**Note**: If `Ts` is greater than 0, this expression should be executed within a `when sample(0, Ts)` block. Otherwise, it should be executed directly.

//modelica
```model Nand "NAND gate"
  extends IndustrialControlSystems.Logical.LogicalOperations.Interfaces.Logical