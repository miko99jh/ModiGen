
Generate a Modelica function named `moh` to calculate the minute of an hour given a specific time. The function should correctly handle the conversion from a continuous time input to discrete minute output, factoring in the starting hour, minute, and second. The input parameters 't', 'hour_start', 'min_start', and 'sec_start' represent the current time in seconds and the initial hour, minute, and second respectively. The output 'y' should represent the minute of the current hour, ranging from 0 to 59.   Use `AES.Functions.sod` and `AES.Functions.hod` to calculate seconds of the day and hour of the day as intermediate steps(represented by two protection variables s and h), ensuring accurate minute calculation within an hour frame.

//modelica
```function moh(t, hour_start, min_start, sec_start, y)
protected
	s = sod(t, hour_start, min_start, sec_start);
	h = hod(t, hour_start, min_start, sec_start);
	y = (s/60) - (h*60);
end moh;```

### 3.2.2.2.3. `moh_test`

Write a Modelica function named `moh_test` to test the `moh` function. The function should take a continuous time input `t` and return the minute of the hour `y` as output. The function should be able to handle a variety of inputs, including negative and positive values for `t`, `hour_start`, `min_start`, and `sec_start`.

//modelica
```function moh_test(t, hour_start, min_start, sec_start, y)
protected
	y = moh(t, hour_start, min_start, sec_start);
end moh_test;```

### 3.2.2.2.4. `moh_test_results`

Write a Modelica function named `moh_test_results` to test the `moh_test` function. The function should take a continuous time input `t` and return the minute of the hour `y` as output. The function should be able to handle a variety of inputs, including negative and positive values for `t`, `hour_start`, `min_start`, and `sec_start`.

//modelica
```function moh_test_results(t, hour_start, min_start, sec_start, y)
protected
	y = moh_test(t,