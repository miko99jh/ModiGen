
Create a Modelica model named `Xnor` for an n-bit XNOR gate. The model should extend `IndustrialControlSystems.Logical.LogicalOperations.Interfaces.LogicalBlock` with `nInput=2` and `final nOutput=1`. The functionality of the model is to perform an XNOR operation on n input signals and produce a single output signal.
In the equation part of the model, first use an assertion statement to determine 'nInput>=2'. If the parameter `Ts` (sample time) is greater than 0, the model should sample the input signals at regular intervals. The result should be a single output signal that use the expression `y[1] = not Functions.Xor(u[:], nInput)` to perform the XNOR operation.
**Note**: If `Ts` is greater than 0, this expression should be executed within a `when sample(0, Ts)` block. Otherwise, it should be executed directly.

//modelica
```model Xnor "XNOR gate"
  extends IndustrialControlSystems.Logical.LogicalOperations.Interfaces.LogicalBlock;
  parameter Integer nInput "Number of inputs";
  parameter Real Ts "Sample time";
  parameter Boolean init "Initial value of output";
  parameter Boolean y0 "Initial value of output";
  parameter Real k "Gain";
  parameter Real b "Bias";
  parameter Boolean show_pins "Show pins";
  parameter Boolean show_labels "Show labels";
  parameter Boolean show_values "Show values";
  parameter Boolean show_icons "Show icons";
  parameter Boolean show_background "Show background";
  parameter Boolean show_parameters "Show parameters";
  parameter Boolean show_initial_conditions "Show initial conditions";
  parameter Boolean show_equations "Show equations";
  parameter Boolean show_inputs "Show inputs";
  parameter Boolean show_outputs "Show outputs";
  parameter Boolean show_states "Show states";
  parameter Boolean show_modes "Show modes";
  parameter Boolean show_blocks "Show blocks";
  parameter Boolean show_lines "Show lines";
  parameter Boolean show_icons_in_2D "Show icons in 2D";
  parameter Boolean show_text_in_2D "Show text in 2D";
  parameter Boolean show_parameters_in_2D "Show parameters in 2D";
  parameter Boolean show_initial_conditions_in_2D "Show initial conditions in 2D";
  parameter Boolean show_equations_in_2D "Show equations in 2D";
  parameter Boolean show_inputs_in_2D "Show inputs in 2D";
  parameter Boolean show_outputs_in_2D "Show outputs in 2D";
  parameter Boolean show_states_in_2D "Show states in 2D";
  parameter Boolean show_modes_in_2D "Show modes in 2D";
  parameter Boolean show_blocks