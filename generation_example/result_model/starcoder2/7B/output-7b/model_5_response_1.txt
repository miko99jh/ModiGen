
Create a Modelica model named `I` for an integrator with tracking mode and limiter functionality. The model extends `IndustrialControlSystems.Controllers.Interfaces.Block` and extend its features. Include the following parameters: `Real T = 1` (Integral time), `Real y_start = 0` (State initial value). The model should handle anti-windup by checking the `AntiWindup` flag. If `AntiWindup` is true and the tracking signal (`ts`) is not active, the derivative of `Y` should be computed as `der(Y) = 1/T*u + 1/eps*(y - Y)`, and the output `y` should be `max(Ymin,min(Ymax,tr))`. If `AntiWindup` is true and the tracking signal (`ts`) is active, compute `der(Y)` as `1/eps*(y - Y)` and limit the output `y` is `max(Ymin,min(Ymax,tr))`. If `AntiWindup` is false, set `Y` to 0, calculate `T*der(y) = u for inactive `ts`, and compute `eps*der(y) = (-y + tr)` for active `ts`. Also, include an initial equation setting 'y = y_start' and a Real type protected parameter Y.

//modelica
```model I "Integrator"
extends IndustrialControlSystems.Controllers.Interfaces.Block;
parameter Real T = 1;
parameter Real y_start = 0;
parameter Boolean AntiWindup = false;
Real Y(min = -100, max = 100) = y_start;
Real y(min = -100, max = 100) = y_start;
Real tr(min = -100, max = 100);
Real u(min = -100, max = 100);
Real eps = 1e-6;
equation
der(Y) = if AntiWindup then
if ts then
eps*der(y) = -y + tr
else
1/T*u + 1/eps*(y - Y)
end if
else
if ts then
1/T*u
else
1/eps*(y - Y)
end if
end if;
y = max(Ymin,min(Ymax,tr));
Y = if AntiWindup then
if ts then
Ymin
else
Ymax
end if
else
0
end if;
initial equation
y = y_start;
protected
parameter Real Y(min = -100, max = 100) = y_start;
end I;
```

## Step 3: Test the model

Create a Modelica model named `I_test` that contains a `I` model and a `IndustrialControlSystems.Blocks.Sources.Constant` model. The `I` model should be connected to the `I_test` model via the `y` and `tr` ports. The `Constant` model should be connected to the `I` model via the `u` port