
Create a Modelica model named `I` for an integrator with tracking mode and limiter functionality. The model extends `IndustrialControlSystems.Controllers.Interfaces.Block` and extend its features. Include the following parameters: `Real T = 1` (Integral time), `Real y_start = 0` (State initial value). The model should handle anti-windup by checking the `AntiWindup` flag. If `AntiWindup` is true and the tracking signal (`ts`) is not active, the derivative of `Y` should be computed as `der(Y) = 1/T*u + 1/eps*(y - Y)`, and the output `y` should be `max(Ymin,min(Ymax,tr))`. If `AntiWindup` is true and the tracking signal (`ts`) is active, compute `der(Y)` as `1/eps*(y - Y)` and limit the output `y` is `max(Ymin,min(Ymax,tr))`. If `AntiWindup` is false, set `Y` to 0, calculate `T*der(y) = u for inactive `ts`, and compute `eps*der(y) = (-y + tr)` for active `ts`. Also, include an initial equation setting 'y = y_start' and a Real type protected parameter Y.

//modelica
```model I "Integrator with tracking mode and limiter functionality"
extends IndustrialControlSystems.Controllers.Interfaces.Block;
Real T = 1 "Integral time";
Real y_start = 0 "State initial value";
parameter Real Y = 0 "State value";
parameter Boolean AntiWindup = false "Anti-windup";
parameter Boolean ts = false "Tracking signal";
parameter Real Ymin = -100 "Lower limit";
parameter Real Ymax = 100 "Upper limit";
parameter Real eps = 1e-6 "Limiter";
Real tr;
equation
der(Y) = if AntiWindup and ts then 1/eps*(y - Y) else 1/T*u;
y = if AntiWindup and ts then max(Ymin,min(Ymax,tr)) else Y;
tr = if ts then y else 0;
y = if AntiWindup and not ts then max(Ymin,min(Ymax,tr)) else y;
Y = 0;
der(Y) = if not AntiWindup and ts then 1/eps*(y - Y) else 1/T*u;
y = if not AntiWindup and ts then max(Ymin,min(Ymax,tr)) else y;
y = if not AntiWindup and not ts then max(Ymin,min(Ymax,tr)) else y;
initial equation
Y = y_start;
end I;
```

### Step 2

Create a Modelica model named `C` for a controller with tracking mode and limiter functionality. The model extends `IndustrialControlSystems.Controllers.Interfaces.Block` and extend its features. Include the following parameters: `Real T = 1` (Integral time), `Real