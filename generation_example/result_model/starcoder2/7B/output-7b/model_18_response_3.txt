
Create a Modelica model for a first-order low-pass filter with no output limitations. The model should be named `FirstOrder` and extend Modelica.Blocks.Interfaces.SISO with parameter `y(start = y_start)`. The purpose of this model is to apply a low-pass filter with a transfer function y/u = k/(1+s*T). Depending on the parameter `T`, the filter can either have dynamics or be reduced to a static gain. If T > 0, the model applies a dynamic low-pass filter; otherwise, it acts as a static gain.

Parameters:
- `Boolean noDynamics` (default: `not(T > 0)`): Determines trivial configuration with no dynamics.
- `Real k` (default: 1): Gain of the filter.
- `Modelica.Units.SI.Time T`: Time constant of the filter.
- `Modelica.Blocks.Types.Init initType` (default: `Modelica.Blocks.Types.Init.NoInit`): Type of initialization.
- `Real y_start` (default: 0): Initial value of the output.
- The instantiation of `Modelica.Blocks.Continuous.FirstOrder` named `firstOrder1`, which has parameters T = T, initType = initType, k = k, y_start = y_start, With conditions `if not noDynamics`.
-The instantiation of `Modelica.Blocks.Math. Gain` named `gain`, which has parameters k = k, with conditions `if noDynamics`.

The Equations section includes the following connections :
- connect(gain.y, y);
- connect(firstOrder1.y, y);
- connect(u, firstOrder1.u);
- connect(u, gain.u);

Implement the described `FirstOrder` model according to these specifications.

//modelica
```model FirstOrder "First-order low-pass filter"
extends Modelica.Blocks.Interfaces.SISO;
Boolean noDynamics = not(T > 0);
parameter Real k = 1 "Gain of the filter";
parameter Modelica.Units.SI.Time T = 1 "Time constant of the filter";
parameter Modelica.Blocks.Types.Init initType = Modelica.Blocks.Types.Init.NoInit "Type of initialization";
parameter Real y_start = 0 "Initial value of the output";
Modelica.Blocks.Continuous.FirstOrder firstOrder1(T=T, initType=initType, k=k, y_start=y_start,
  with when not noDynamics);
Modelica.Blocks.Math.Gain gain(k=k, with when noDynamics);
equation
connect(gain.y, y);
connect(firstOrder1.y, y);
connect(u, firstOrder1.u);
connect(u, gain.u);
end FirstOrder;
```

### 2.2.3. Exercise 2.2.3:

Create a Modelica model for a first-order low-pass filter with output limitations. The model should be named `FirstOrderLimited` and extend Modelica.Blocks.Interfaces.SISO with parameter `y(start = y_start)`. The purpose of this model is to apply a low-pass filter with a transfer function y/u = k/(1+s*T). Depending on the parameter `T`, the filter can either have dynamics or be reduced to a static gain. If T > 0, the model applies a dynamic low-pass filter; otherwise, it acts as a static gain.

Parameters:
- `Boolean noDynamics` (default: `not(T > 0)`): Determines trivial configuration with no dynamics