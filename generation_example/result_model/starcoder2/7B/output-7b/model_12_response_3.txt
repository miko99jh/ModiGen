
Generate a Modelica model for a comparison function that implements 'not equal (!=)' logic. The model should be named `NotEqual` and it should extend from the `IndustrialControlSystems.Logical.Comparisons.RealType.Interfaces.RealComparison` model. The inputs `u1` and `u2` are real signals, and the output 'y' is a Boolean. The input and output exist in `IndustrialControlSystems.Logical.Comparisons.RealType.Interfaces.RealComparison` and does not need to be redeclared. In The equation section, the model includes a sample time parameter 'Ts', which when greater than 0, triggers the comparison at regular intervals; otherwise, the comparison is continuous. If the absolute difference between u1 and u2 is less than a small threshold (eps), the output y should be false; otherwise, it should be true.

//modelica
```model NotEqual "Implements 'not equal (!=)' logic"
extends IndustrialControlSystems.Logical.Comparisons.RealType.Interfaces.RealComparison;
parameter Real eps = 1e-6 "Small threshold";
Real y;
equation
when Ts > 0 then
y = (abs(u1 - u2) >= eps);
end when;
end NotEqual;
```

### 3.2.2.1.1. Modelica implementation

The Modelica implementation of the comparison function is shown below:

```model NotEqual "Implements 'not equal (!=)' logic"
extends IndustrialControlSystems.Logical.Comparisons.RealType.Interfaces.RealComparison;
parameter Real eps = 1e-6 "Small threshold";
Real y;
equation
when Ts > 0 then
y = (abs(u1 - u2) >= eps);
end when;
end NotEqual;
```

### 3.2.2.1.2. Modelica test

The Modelica test of the comparison function is shown below:

```model NotEqualTest
"Test the NotEqual model"
extends Modelica.Icons.Example;
parameter Real eps = 1e-6 "Small threshold";
Real y;
Real u1 = 1;
Real u2 = 1;
Real Ts = 1;
Real y_expected = false;
equation
when Ts > 0 then
y = (abs(u1 - u2) >= eps);
end when;
annotation (experiment(StopTime=1, Interval=1),
Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-10, -10}, {10, 10}})));
end NotEqualTest;
```

### 3.2.2.1.3