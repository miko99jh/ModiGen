
Create a Modelica model named `DeadBand` for a dead-band controller with the following specifications:

1. **Model Functionality**: The model implements a continuous dead-band functionality. The dead-band allows for an asymmetric range. When the 'smoothed' parameter is enabled, a smooth operator is applied. During initialization, the homotopy operator simplifies the model to y = u.

2. **Inheritance and Interfaces**: The model extends `Modelica.Blocks.Interfaces.SISO`.

3. **Parameters**: The model has the following parameters:
   - `uMax` (Real, start=1): Upper limit of the dead zones.
   - `uMin` (Real, default=-uMax): Lower limit of the dead zones.
   - `smoothed` (Boolean, default=false): Indicates whether the smooth operator is applied.

4. **Equations and Expressions**: The model includes the following equations:
   - An assertion to ensure that uMax is greater than or equal to uMin: `assert(uMax >= uMin, "Limits must be consistent");`
   - If `smoothed` is true, the output `y` is calculated using the `smooth` operator and `homotopy`:
  `y = homotopy(actual = smooth(0, if u < uMin then u - uMin elseif u > uMax then u - uMax else 0), simplified = u);`
   - If `smoothed` is false, the output `y` is calculated directly via `homotopy`:
  `y = homotopy(actual = if u < uMin then u - uMin elseif u > uMax then u - uMax else 0, simplified = u);`

//modelica
```model DeadBand "Continuous dead-band controller"
  extends Modelica.Blocks.Interfaces.SISO;

  parameter Real uMax = 1 "Upper limit of the dead zones";
  parameter Real uMin = -uMax "Lower limit of the dead zones";
  parameter Boolean smoothed = false "Indicates whether the smooth operator is applied";

  equation
    assert(uMax >= uMin, "Limits must be consistent");
    if smoothed then
      y = homotopy(actual = smooth(0, if u < uMin then u - uMin elseif u > uMax then u - uMax else 0), simplified = u);
    else
      y = homotopy(actual = if u < uMin then u - uMin elseif u > uMax then u - uMax else 0, simplified = u);
    end if;
  end DeadBand;
end DeadBand;
```

## 2. Model Instantiation

Create a Modelica model named `DeadBandInstantiation` for instantiating the `DeadBand` model. The model has the following specifications:

1. **Model Functionality**: The model instantiates the `DeadBand` model and connects the input `u` to the output `y`.

2. **Inheritance and Interfaces**: The model extends `Modelica.Blocks.Sources.Constant`.

3. **Parameters**: The model has the following parameters:
   - `u` (Real, start=0): Input signal to the dead-band controller.

4. **Equations and Expressions**: The model includes the following equations:
   - The input signal `u` is connected to the output `y` of the `DeadBand` model: `u = y;`.

//modelica
```model DeadBandInstantiation "Instantiates the DeadBand model"
  extends Modelica.Blocks.Sources.Constant;

  parameter Real u = 0