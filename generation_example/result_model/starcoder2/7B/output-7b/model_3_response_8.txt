
Generate a Modelica block named `SignalRanker` that ranks output signals such that the output signals are ordered in descending order (y[i] >= y[i+1]). The block should extend the `Modelica.Blocks.Interfaces.MIMO` interface, ensuring that the number of outputs (nout) matches the number of inputs (nin). Use the `Modelica.Math.Vectors.sort` function to sort the input vector (u) in descending order with the 'ascending' parameter set to false.

//modelica
```block SignalRanker
Modelica.Blocks.Interfaces.MIMO nin, nout;
input Real u[nin];
output Real y[nout];

equation
y = sort(u, ascending=false);
end SignalRanker;
```

### 3.3.3.3.2.1.2. Modelica.Math.Vectors.sort

//modelica
```block Modelica.Math.Vectors.sort
function sort(u, ascending)
output Real y[size(u)];

algorithm
y := u;
if ascending then
Modelica.Math.Vectors.sort(y);
else
Modelica.Math.Vectors.sort(y, ascending=true);
end if;
end sort;
```

### 3.3.3.3.2.1.3. Modelica.Math.Vectors.sort

//modelica
```block Modelica.Math.Vectors.sort
function sort(u)
output Real y[size(u)];

algorithm
y := u;
Modelica.Math.Vectors.sort(y);
end sort;
```

### 3.3.3.3.2.1.4. Modelica.Math.Vectors.sort

//modelica
```block Modelica.Math.Vectors.sort
function sort(u, ascending)
output Real y[size(u)];

algorithm
y := u;
if ascending then
Modelica.Math.Vectors.sort(y);
else
Modelica.Math.Vectors.sort(y, ascending=true);
end if;
end sort;
```

### 3.3.3.3.2.1.5. Modelica.Math.Vectors.sort

//modelica
```block Modelica.Math.Vectors.