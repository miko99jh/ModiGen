
Create a Modelica model named `I` for an integrator with tracking mode and limiter functionality. The model extends `IndustrialControlSystems.Controllers.Interfaces.Block` and extend its features. Include the following parameters: `Real T = 1` (Integral time), `Real y_start = 0` (State initial value). The model should handle anti-windup by checking the `AntiWindup` flag. If `AntiWindup` is true and the tracking signal (`ts`) is not active, the derivative of `Y` should be computed as `der(Y) = 1/T*u + 1/eps*(y - Y)`, and the output `y` should be `max(Ymin,min(Ymax,tr))`. If `AntiWindup` is true and the tracking signal (`ts`) is active, compute `der(Y)` as `1/eps*(y - Y)` and limit the output `y` is `max(Ymin,min(Ymax,tr))`. If `AntiWindup` is false, set `Y` to 0, calculate `T*der(y) = u for inactive `ts`, and compute `eps*der(y) = (-y + tr)` for active `ts`. Also, include an initial equation setting 'y = y_start' and a Real type protected parameter Y.

//modelica
```model I
extends IndustrialControlSystems.Controllers.Interfaces.Block;
Real T = 1;
Real y_start = 0;
Real Y(min = -100, max = 100) = y_start;
Real eps = 1e-6;
Real Ymin = -100;
Real Ymax = 100;
Real u(start = 0);
Real ts(start = 0);
Boolean AntiWindup = false;
equation
der(Y) = if AntiWindup and ts == 0 then 1/T*u + 1/eps*(y - Y) else 1/eps*(y - Y);
y = if AntiWindup and ts == 0 then max(Ymin,min(Ymax,tr)) else max(Ymin,min(Ymax,tr));
Y = if AntiWindup and ts == 0 then 0 else Y;
tr = if AntiWindup and ts == 0 then 0 else (-y + tr);
y = if AntiWindup and ts == 1 then max(Ymin,min(Ymax,tr)) else max(Ymin,min(Ymax,tr));
Y = if AntiWindup and ts == 1 then 0 else Y;
tr = if AntiWindup and ts == 1 then 0 else (-y + tr);
initial equation
y = y_start;
end I;
```

### Create a Modelica model named `P` for a proportional controller. The model extends `IndustrialControlSystems.Controllers.Interfaces.Block` and extend its features. Include the following parameters: `Real Kp = 1` (Proportional gain), `Real y_start = 0` (State initial value).