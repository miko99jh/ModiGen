
Create a Modelica model named `ComplexPoles` that represents a process with complex poles. The model should extend `IndustrialControlSystems.LinearSystems.Interfaces.DiscreteBaseBlock` and include the following parameters: 'xi' (Real, Damping coefficient, 0.8), 'omegan' (Real, Natural frequency, 0.1), 'mu' (Real, Gain, 1), 'y_start' (Real, Output initial value, 0), and 'dy_start' (Real, Slope initial value, 0). The parameters also include two protected Real paramete 'u_pre1', 'y_pre1'. In the initial equation section, set 'pre(y)' to 'y_start' and 'pre(y_pre1)' to 'dy_start'. The model's main equation should ensure that the damping coefficient 'xi' is between 0 and 1 using an assertion. It should be executed during discrete time sampling events, defined with 'sample(0, Ts)'. â€‹The result of 'IndustrialControlSystems.LinearSystems.Discrete.Functions.fCmplx((alfa,u,pre(u),pre(u_pre1),pre(y),pre(y_pre1),Ts,mu,xi,omegan))' is assigned to 'y', representing the process output at each sample point. After calculating 'y', the variables 'u_pre1' and 'y_pre1' should be updated with the previous values of 'u' and 'y' to prepare for the next sample.

//modelica
```model ComplexPoles "Complex Poles"
extends IndustrialControlSystems.LinearSystems.Interfaces.DiscreteBaseBlock;
//Parameters
parameter Real xi(min=0,max=1,start=0.8) "Damping coefficient";
parameter Real omegan(min=0,start=0.1) "Natural frequency";
parameter Real mu(start=1) "Gain";
parameter Real y_start(start=0) "Output initial value";
parameter Real dy_start(start=0) "Slope initial value";
//Variables
protected Real u_pre1;
protected Real y_pre1;
//Initial equations
equation
pre(y) = y_start;
pre(y_pre1) = dy_start;
//Main equation
equation
assert(xi>=0 and xi<=1);
y = IndustrialControlSystems.LinearSystems.Discrete.Functions.fCmplx((alfa,u,pre(u),pre(u_pre1),pre(y),pre(y_pre1),Ts,mu,xi,omegan));
//Update variables
u_pre1 = u;
y_pre1 = y;
//Discrete time sampling
discrete sample(0,Ts)
end ComplexPoles;
```

### Step 2: Create a Modelica model named `ComplexPoles_Test` that extends `Modelica.Blocks.Tests.SimpleTest` and includes the following parameters: 'xi' (Real, Damping coefficient, 0.8), 'omegan' (Real, Natural frequency, 0.1),'mu' (Real, Gain, 1), 'y_start' (Real, Output initial value, 0), and 'dy_start' (Real, Slope initial value, 0). The parameters also include two protected Real paramete 'u_